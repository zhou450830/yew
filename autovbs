Sub 文件()
  '进行格式设置。当运行此宏时，会弹出一个文件夹对话框，让用户选择待处理文件所在的文件夹。然后，此宏会遍历文件夹中的所有 Word 文档，针对每个文档执行以下操作：
  '设置文档页面，将页面方向设置为纵向、大小设置为 A4 纸张大小、边距设置为 2.5 厘米、页眉距离设置为 1 厘米、页脚距离设置为 0.5 厘米。  '对文档中的所有段落统一设置格式，包括行间距、段前段后间距、字体、字号等。
  '针对不同级别的标题，分别设置其字号和加粗。  '对文档中所有表格设置样式，包括自动调整列宽、表格外边框线样式、居中对齐等。  '对图片标题设置样式，包括设置为加粗、设置字号为 10.5 号。  '在执行上述操作时，代码还采用了一些 VBA 内置函数，如 CentimetersToPoints、LinesToPoints 等，用于将长度单位转换为磅数，并且使用了 VBScript.RegExp 类来匹配图片标题的样式
  
    
    Dim vDirectory As String
    Dim theParagraph As Paragraph, theStr$
    Dim reg As Object
    Dim wrs As Characters

    Dim oDoc As Document
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "选择待处理文件所在的文件夹"
        .InitialFileName = "c:\"
        If .Show Then
            vDirectory = .SelectedItems(1) & "\"
        Else
            Exit Sub
        End If
    End With
    vFile = Dir(vDirectory & "*.*", vbNormal)
    Dim par As Paragraph
    Dim tabl As Table
    Do While vFile <> ""
        Application.ScreenUpdating = False
        Set oDoc = Documents.Open(FileName:=vDirectory & vFile)
        '设置文档页面
        Const PAGE_WIDTH As Single = 21 ' 定义页面宽度
Const PAGE_HEIGHT As Single = 29.7 ' 定义页面高度
Const TOP_MARGIN As Single = 2.5 ' 定义上边距
Const BOTTOM_MARGIN As Single = 2.5 ' 定义下边距
Const LEFT_MARGIN As Single = 2.5 ' 定义左边距
Const RIGHT_MARGIN As Single = 2.5 ' 定义右边距
Const HEADER_DISTANCE As Single = 1 ' 定义页眉与页面的距离
Const FOOTER_DISTANCE As Single = 0.5 ' 定义页脚与页面的距离

With oDoc.PageSetup
    .Orientation = wdOrientPortrait
    .PageWidth = CentimetersToPoints(PAGE_WIDTH)
    .PageHeight = CentimetersToPoints(PAGE_HEIGHT)
    .TopMargin = CentimetersToPoints(TOP_MARGIN)
    .BottomMargin = CentimetersToPoints(BOTTOM_MARGIN)
    .LeftMargin = CentimetersToPoints(LEFT_MARGIN)
    .RightMargin = CentimetersToPoints(RIGHT_MARGIN)
    .HeaderDistance = CentimetersToPoints(HEADER_DISTANCE)
    .FooterDistance = CentimetersToPoints(FOOTER_DISTANCE)
End With
     
    With oDoc.Content
    '逐个处理每个段落
    For Each par In .Paragraphs
        Select Case par.OutlineLevel
            Case wdOutlineLevel1 To wdOutlineLevel5
                par.Range.Font.Bold = True
                par.Range.Font.Size = 16 - par.OutlineLevel + 1 '根据大纲级别设置字号
                par.Range.Font.Name = "黑体"
            Case wdOutlineLevel6 To wdOutlineLevel9
                par.Range.Font.Bold = True
                par.Range.Font.Size = 12
                par.Range.Font.Name = "宋体"
            Case Else '其余段落为正文段落
                With par.Range.ParagraphFormat
                    .LineSpacingRule = wdLineSpaceMultiple '统一设置为多倍行距
                    .LineSpacing = LinesToPoints(1.2)
                    .SpaceBeforeAuto = False
                    .SpaceBefore = LinesToPoints(0.5) '设置段前间距为0.5行
                    .SpaceAfter = LinesToPoints(0.5) '设置段后间距为0.5行
                End With
                With par.Range.Font
                    .Name = "宋体"
                    .Size = 12
                    .Bold = False
                End With
        End Select
    Next
End With

      
Dim t As Table, c As Cell, a&, e&, i As Paragraph, j&, k&, x&, y&, z&, u&, v&, s&

    If Selection.Information(12) Then a = 1
    For Each t In ActiveDocument.Tables
        If a = 1 Then Set t = Selection.Tables(1)
        With t
            '取消环绕
            With .Rows
                .WrapAroundText = False
                .Alignment = wdAlignRowLeft
                .LeftIndent = CentimetersToPoints(0)
            End With

            '判断表格是否规则(e=1=规则/e=0=不规则)
            With .Range
                With .Find
                    .Execute "^13", , , , , , , , , "^p", 2
                    .Execute "^11", , , , , , , , , "^p", 2
                End With
                x = .Information(wdEndOfRangeRowNumber)
                y = .Information(wdEndOfRangeColumnNumber)
                z = .Cells.Count
            End With
            If x <> 1 Then
                If z = x * y Then
                    For k = 1 To y
                        For j = 1 To x - 1
                            If .Cell(j + 1, k).Width = .Cell(j, k).Width Then e = 1 Else e = 0
                            If e = 0 Then Exit For
                        Next j
                        If e = 0 Then Exit For
                    Next k
                Else
                    e = 0
                End If
            Else
                e = 1
            End If

            '清除空格
            If Asc(.Range.Next) <> 13 Then .Range.Next.InsertBefore Text:=vbCr
            .Select
            Selection.MoveEnd
            CommandBars.FindControl(ID:=122).Execute
            Selection.Characters.Last.ParagraphFormat.Alignment = wdAlignParagraphJustify
            .Select

            '清除格式
            Selection.ClearFormatting
            With .Range
                With .Font
                    .NameAscii = "Times New Roman"
                    .Size = 12
                    .Kerning = 0
                    .DisableCharacterSpaceGrid = True
                End With
                With .ParagraphFormat
                    .Space1
                    .Alignment = wdAlignParagraphCenter
                    .AutoAdjustRightIndent = False
                    .DisableLineHeightGrid = True
                End With
                .Cells.VerticalAlignment = wdCellAlignVerticalCenter
            End With

            .LeftPadding = CentimetersToPoints(0.19)
            .RightPadding = CentimetersToPoints(0.19)

            .AutoFitBehavior (wdAutoFitContent)
            .Select
            .AutoFitBehavior (wdAutoFitWindow)

            '行高最小值
            With .Rows
                .HeightRule = wdRowHeightAtLeast
                .Height = CentimetersToPoints(0.9)
            End With

            '表头加粗
            If e = 1 Then
                If .Rows.Count >= 2 And .Columns.Count >= 2 Then
                    If Len(.Cell(2, 2).Range) > 2 Then
                        With .Rows(1).Range.Font
                            .NameFarEast = "黑体"
                            .Bold = True
                        End With
                    End If
                End If
            Else
                v = .Columns.Count
                For u = 1 To v
                    If .Range.Cells(u).Range.Information(wdEndOfRangeRowNumber) = .Range.Cells(u + 1).Range.Information(wdEndOfRangeRowNumber) Then
                        s = 1
                    Else
                        s = 0
                        Exit For
                    End If
                    If u + 1 = v Then Exit For
                Next u
                If s = 1 Then
                    For u = 1 To v
                        With .Cell(1, u).Range.Font
                            .NameFarEast = "黑体"
                            .NameAscii = "Times New Roman"
                            .Bold = True
                        End With
                    Next u
                End If
            End If

            '删除单元格空段
            For Each c In .Range.Cells
                For Each i In c.Range.Paragraphs
                    If Asc(i.Range) = 13 And Len(i.Range) = 1 Then i.Range.Delete
                Next
                With c.Range.Paragraphs
                    If .Count > 1 And Len(.Last.Range) = 2 Then .Last.Previous.Range.Characters.Last.Delete
                End With
            Next
        End With
        If a = 1 Then Exit For
    Next
   For Each t In ActiveDocument.Tables
        t.Range.Next.InsertParagraphBefore
    Next
     
    For Each i In ActiveDocument.Paragraphs
        If i.Range Like "*" & Chr(12) Then i.Range.Characters.Last.Delete
    Next
       
      '设置图片标题样式
    Set reg = CreateObject("VBScript.RegExp")
        With reg
            .Pattern = "^图\d+\s+"
            For Each theParagraph In oDoc.Paragraphs
                theStr = theParagraph.Range
                If .test(theStr) Then
                    theParagraph.Range.Font.Bold = True
                     theParagraph.Range.Font.Size = 10.5
                End If
            Next
        End With
        Set reg = Nothing


        oDoc.Save
        oDoc.Close
        vFile = Dir
    Loop
  
End Sub
Sub 文格式()
  '进行格式设置。当运行此宏时，会弹出一个文件夹对话框，让用户选择待处理文件所在的文件夹。然后，此宏会遍历文件夹中的所有 Word 文档，针对每个文档执行以下操作：
  '设置文档页面，将页面方向设置为纵向、大小设置为 A4 纸张大小、边距设置为 2.5 厘米、页眉距离设置为 1 厘米、页脚距离设置为 0.5 厘米。  '对文档中的所有段落统一设置格式，包括行间距、段前段后间距、字体、字号等。
  '针对不同级别的标题，分别设置其字号和加粗。  '对文档中所有表格设置样式，包括自动调整列宽、表格外边框线样式、居中对齐等。  '对图片标题设置样式，包括设置为加粗、设置字号为 10.5 号。  '在执行上述操作时，代码还采用了一些 VBA 内置函数，如 CentimetersToPoints、LinesToPoints 等，用于将长度单位转换为磅数，并且使用了 VBScript.RegExp 类来匹配图片标题的样式
    
    
    Dim vDirectory As String
    Dim theParagraph As Paragraph, theStr$
    Dim reg As Object
    Dim wrs As Characters

    Dim oDoc As Document
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "选择待处理文件所在的文件夹"
        .InitialFileName = "c:\"
        If .Show Then
            vDirectory = .SelectedItems(1) & "\"
        Else
            Exit Sub
        End If
    End With
    vFile = Dir(vDirectory & "*.*", vbNormal)
   
    Do While vFile <> ""
        Application.ScreenUpdating = False
        Set oDoc = Documents.Open(FileName:=vDirectory & vFile)
        


        oDoc.Save
        oDoc.Close
        vFile = Dir
    Loop
    
End Sub

Sub 字()
    Dim rng As Range
    Set rng = ActiveDocument.Content '选中整个文档
    rng.Select

    With Selection.Font  '字体设置
        .Name = "宋体"
        .Size = 12 '号字体
        .ColorIndex = wdBlack '黑色
    End With
End Sub

    


Sub 页码设置9()

ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary).PageNumbers.Add PageNumberAlignment:=wdAlignPageNumberCenter, FirstPage:=True

With ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary) '进入页脚编辑状态
.Range.Font.Size = 12
.Range.Font.Name = "仿宋"
.Range.Collapse Direction:=wdCollapseEnd
End With

End Sub
Sub 页面设置3()

'   设置页面
    With Selection.PageSetup
        .LineNumbering.Active = False
        .Orientation = wdOrientPortrait
        .TopMargin = CentimetersToPoints(2.54)
        .BottomMargin = CentimetersToPoints(1.4)
        .LeftMargin = CentimetersToPoints(2.2)
        .RightMargin = CentimetersToPoints(1.3)
        .Gutter = CentimetersToPoints(0)
        .HeaderDistance = CentimetersToPoints(1.3)
        .FooterDistance = CentimetersToPoints(2)
        .PageWidth = CentimetersToPoints(21)
        .PageHeight = CentimetersToPoints(29.7)
        .FirstPageTray = wdPrinterDefaultBin
        .OtherPagesTray = wdPrinterDefaultBin
        .SectionStart = wdSectionNewPage
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .VerticalAlignment = wdAlignVerticalTop
        .SuppressEndnotes = False
        .MirrorMargins = False
        .TwoPagesOnOne = False
        .BookFoldPrinting = False
        .BookFoldRevPrinting = False
        .BookFoldPrintingSheets = 1
        .GutterPos = wdGutterPosLeft
        .CharsLine = 39
        .LinesPage = 32
        .LayoutMode = wdLayoutModeGrid
    End With

        

End Sub
Sub 页置2()

'   首行缩进
    
    With Selection.ParagraphFormat
 
        .LeftIndent = CentimetersToPoints(0)
 
        .RightIndent = CentimetersToPoints(0)
 
        .SpaceBefore = 0
 
        .SpaceBeforeAuto = False
 
        .SpaceAfter = 0
 
        .SpaceAfterAuto = False
 
        .LineSpacingRule = wdLineSpaceSingle
 
        .Alignment = wdAlignParagraphJustify
 
        .WidowControl = False
 
        .KeepWithNext = False
 
        .KeepTogether = False
 
        .PageBreakBefore = False
 
        .NoLineNumber = False
 
        .Hyphenation = True
 
        .FirstLineIndent = CentimetersToPoints(0)
 
        .OutlineLevel = wdOutlineLevelBodyText
 
        .CharacterUnitLeftIndent = 0
 
        .CharacterUnitRightIndent = 0
 
        .CharacterUnitFirstLineIndent = 2
 
        .LineUnitBefore = 0
 
        .LineUnitAfter = 0
 
        .MirrorIndents = False
 
        .TextboxTightWrap = wdTightNone
 
        .AutoAdjustRightIndent = True
 
        .DisableLineHeightGrid = False
 
        .FarEastLineBreakControl = True
 
        .WordWrap = True
 
        .HangingPunctuation = True
 
        .HalfWidthPunctuationOnTopOfLine = False
 
        .AddSpaceBetweenFarEastAndAlpha = True
 
        .AddSpaceBetweenFarEastAndDigit = True
 
        .BaseLineAlignment = wdBaselineAlignAuto
 
    End With

End Sub
Sub 页面置()
'  设置当前文档的页面格式、段落格式和字体属性。具体而言，此宏使用Selection.WholeStory语句选择整个文档，并使用Application.ScreenUpdating = False语句关闭屏幕更新（以提高宏的执行速度）。

'  接下来，此宏使用With Selection.PageSetup语句对当前文档的页面属性进行设置，其中.TopMargin、.BottomMargin、.LeftMargin和.RightMargin分别表示文档的上、下、左、右四个边距大小。同时，此宏还使用With Selection.Paragraphs语句设置段落格式，其中.IndentFirstLineCharWidth 2表示在段落开头添加两个字符的缩进，.Alignment = wdAlignParagraphLeft则表示将段落设置为左对齐，.LineSpacingRule = wdLineSpace1pt5表示设置行距为1.5倍行距。此外，该宏还使用Selection.Range.HighlightColorIndex = wdNoHighlight语句取消文本的突出显示。

'  最后，此宏使用With Selection.Font语句设置当前文档的字体格式，其中.Name = "宋体"表示将字体设置为宋体，.Size = 12表示将字号设置为12，而.ColorIndex = wdBlack则表示将字体颜色设置为黑色。
'   清除格式
    Selection.WholeStory
    '  Selection.ClearParagraphDirectFormatting
    On Error Resume Next
    Application.ScreenUpdating = False
'清除当前文档中所有文字的格式，包括字体、字号、颜色等。具体而言，此宏使用Selection.WholeStory语句选择整个文档，即将光标定位在文档的起始位置，然后选中整个文档。接着，此宏使用On Error Resume Next语句关闭错误处理功能，以便在执行此宏时忽略任何可能出现的错误。最后，此宏使用Application.ScreenUpdating = False语句关闭屏幕更新，以提高宏的执行速度。综合来看，该段 VBA 代码旨在帮助用户清除当前文档中的所有格式，以便更方便地对文档进行排版和编辑。

With Selection.PageSetup              '页面设置
.TopMargin = CentimetersToPoints(3.7)      '顶端边距
.BottomMargin = CentimetersToPoints(3.5)   '底端边距
.LeftMargin = CentimetersToPoints(2.8)     '左边距
.RightMargin = CentimetersToPoints(2.6)    '右边距

.PageWidth = CentimetersToPoints(21)   '页面宽度
.PageHeight = CentimetersToPoints(29)  '页面高度
End With

 With Selection.Paragraphs '设置行距
.FirstLineIndent = CentimetersToPoints(0) '取消首行缩进
.IndentFirstLineCharWidth 2 '首行缩进2个字符
.Alignment = wdAlignParagraphLeft '左对齐
.LineSpacingRule = wdLineSpace1pt5 '行距固定1pt5

Selection.Range.HighlightColorIndex = wdNoHighlight '突出显示文本取消

End With
End Sub
Sub SetMuvelList()

 ' 将Word文档中的标题样式设置为多级列表。

 ' 首先，该程序使用For Each语句遍历所有的段落，并将每个段落的样式存储在objStyle变量中。接下来，使用Select Case语句检查样式名称，如果样式匹配，则将objListTemplate变量设置为相应的多级列表模板。如果未定义样式，则将objListTemplate变量设置为空。

 ' 然后，该程序检查objListTemplate变量是否已分配，如果已分配，则将objParagraph.Range.ListFormat.ApplyListTemplate方法应用于该段落的范围。该方法以多级列表模板为参数，将当前段落设置为所需的多级列表。

 ' 最后，该程序手动清除对象变量以释放内存。
    Dim objParagraph As Paragraph
    Dim objStyle As Style
    Dim objListTemplate As ListTemplate
    
    On Error Resume Next '启用错误处理
    ' 遍历所有的段落
    For Each objParagraph In ActiveDocument.Paragraphs
        ' 将每个段落的样式存储在objStyle变量中
        Set objStyle = objParagraph.Range.Style
        
        If Not objStyle Is Nothing Then '检查对象变量是否已分配
            ' 检查样式名称，如果匹配，则将objListTemplate变量设置为相应的多级列表模板
            Select Case objStyle.NameLocal
                Case "Heading 1"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(1)
                    
                Case "Heading 2"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(2)
                    
                Case "Heading 3"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(3)
                    
                Case "Heading 4"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(4)
                    
                Case "Heading 5"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(5)
                    
                Case "Heading 6"
                    Set objListTemplate = ListGalleries(wdOutlineNumberGallery).ListTemplates(6)
                    
                Case Else '未定义的样式
                    Set objListTemplate = Nothing '设置为空
                    
            End Select
            
            If Not objListTemplate Is Nothing Then '检查对象变量是否已分配
                ' 将当前段落设置为所需的多级列表
                objParagraph.Range.ListFormat.ApplyListTemplate ListTemplate:=objListTemplate, _
                    ContinuePreviousList:=False, ApplyTo:=wdListApplyToWholeList, _
                    DefaultListBehavior:=wdWord10ListBehavior
            End If
            
            Set objListTemplate = Nothing '手动清除对象变量以释放内存
        End If
        
        Set objStyle = Nothing '手动清除对象变量以释放内存
    Next objParagraph
    
    On Error GoTo 0 '禁用错误处理
End Sub
Sub 纵横转换() '开始定义一个名为“纵横转换”的子过程实现横向和纵向页面的转换。下面是代码的逐行注释：

    With Selection '将当前选定内容（即光标所在位置）与“With”语句中指定对象关联起来
        If .Type <> wdSelectionIP Then '如果当前选定内容不是插入点，则执行以下操作
            ActiveDocument.Range(Start:=.Start, End:=.Start).InsertBreak Type:=wdSectionBreakNextPage '在当前选定内容的开头插入分节符（下一页）
            .Start = .Start + 1 '将光标移动到新一页的开头
            If .End <> ActiveDocument.Content.End Then '如果当前选定内容的结尾不在文档末尾，则执行以下操作
                ActiveDocument.Range(Start:=.End, End:=.End).InsertBreak Type:=wdSectionBreakNextPage '在当前选定内容的末尾插入分节符（下一页）
            End If
        End If
        With .PageSetup '将当前选定内容所在页的页面设置与“With”语句中指定对象关联起来
            If .Orientation = wdOrientPortrait Then .Orientation = wdOrientLandscape Else .Orientation = wdOrientPortrait '如果页面为纵向，则将其设置为横向；否则，将其设置为纵向
        End With
    End With
End Sub
Sub call宏()
Call 删除无效样式
Call ShowTime
 '定义了一个名为 "call宏" 的 Sub 过程，其中调用了两个以 Call 关键字开始的语句。这两个语句分别调用了名为 "删除无效样式" 和 "删除页眉横线" 的 Sub 过程。这意味着当执行 "call宏" 过程时，将自动执行这两个被调用的过程。

 '需要说明的是，在 VBA 中使用 Call 关键字调用 Sub 过程是可选的。可以直接使用子过程名和指定的参数列表来调用 Sub 过程，无需使用 Call 关键字。但是，在某些情况下，使用 Call 可以提高代码可读性并使其更易于理解。

 '此外，该代码中未定义任何参数，因此 Sub 过程不需要传递任何参数。这意味着，被调用的 Sub 过程应该在其自己的代码中定义所有必需的变量和参数，而不是从父过程传递这些变量和参数。

End Sub
Sub 删除无效样式()
    For Each objStyle In ActiveDocument.Styles
    On Error Resume Next
    If objStyle.BuiltIn = False And objStyle.InUse = True Then
    objStyle.Delete
    End If
    Next
    End Sub
    '函数G：显示代码运行的时间
Sub ShowTime()
StartTime = Timer '记录开始时间
'你的代码
EndTime = Timer '记录结束时间
MsgBox "代码运行时间：" & FormatNumber(EndTime - StartTime, 2) & " 秒"
End Sub
'函数G：显示代码运行的时间
Sub FormadingAsList标题样式格式化为列表()
'将Word文档中的标题样式格式化为列表。

'首先，该程序将ActiveDocument变量设置为doc对象，然后使用For Each语句遍历所有的样式，并将每个样式存储在sty对象中。接下来使用Left函数检查样式名称是否以"Heading"开头。如果是，则使用ParagraphFormat属性调整样式的缩进、前后间距和大纲级别。

'样式的左缩进被设置为0英寸，SpaceBefore属性设置为0点，SpaceAfter属性设置为6点以保持行距的合理间隔。OutlineLevel属性根据样式名称中的数字设置为相应的值。

'最后，该程序使用Set语句清除对象变量以释放内存。
    Dim doc As Document
    Dim sty As Style
    Set doc = ActiveDocument
    
    ' 遍历所有的样式
    For Each sty In doc.Styles
        ' 检查样式名称是否以"Heading"开头
        If Left(sty.NameLocal, 7) = "Heading" Then
            ' 将样式的缩进、前后间距和大纲级别调整为所需的值
            With sty.ParagraphFormat
                .LeftIndent = InchesToPoints(0)
                .SpaceBefore = 0
                .SpaceAfter = 6
                .OutlineLevel = CLng(Right(sty.NameLocal, 1))
            End With
        End If
    Next
    
    ' 手动清除对象变量以释放内存
    Set doc = Nothing
    Set sty = Nothing
End Sub
 '这个宏会遍历文档中的所有样式，如果样式名以“Heading”开头，则将它的段落格式设置为多级列表的级别，从而实现自动排版。
 Sub PaperSetup()
' the code defines a sub called "papersetup". this sub loops through all sections in the active document and sets various properties of their pagesetup object.

' if the section's orientation is portrait, then the top and bottom margins are set to 2.54cm, left and right margins to 3.17cm, and the page size is set to a4 (21x29.7cm). otherwise, if the section's orientation is landscape, then the top and bottom margins are set to 2.5cm, left and right margins to 2.54cm, and the page size is set to reverse-a4 (29.7x21cm).

' in both cases, the header distance is set to 1.5cm and footer distance is set to 1.75cm.用于对Word文档中所有章节的页面设置进行统一配置。

'该代码使用了For Each循环，依次对当前文档中的每一个章节进行处理。处理过程中，该代码首先获取该章节的页面设置(PageSetup)对象，然后根据页面方向(Orientation)的不同分别设置上下边距、左右边距和页面大小，以及页眉与正文之间、页脚与正文之间的距离。因此，在文档存在多种纸张、页面方向的情况下，该代码可以自动识别并完成适当的页面设置，并确保各个章节的页面设置一致。

'值得注意的是，该代码中使用了CentimetersToPoints函数将厘米单位的数值转换为磅单位（即Word中的默认测量单位），以便正确地设置页面大小和距离。在使用该代码时，应先仔细检查所选的纸张、页边距和页眉页脚等设置，确保它们符合实际需要。

' note: "centimeterstopoints" is a built-in function in vba that converts from centimeters to points (i.e. the unit of measurement used by word).
    Dim s As Section
    For Each s In ActiveDocument.Sections
        With s.PageSetup
            If .Orientation = wdOrientPortrait Then
                .TopMargin = CentimetersToPoints(2.54)
                .BottomMargin = CentimetersToPoints(2.54)
                .LeftMargin = CentimetersToPoints(3.17)
                .RightMargin = CentimetersToPoints(3.17)
                .PageWidth = CentimetersToPoints(21)
                .PageHeight = CentimetersToPoints(29.7)
            Else
                .TopMargin = CentimetersToPoints(2.5)
                .BottomMargin = CentimetersToPoints(2.5)
                .LeftMargin = CentimetersToPoints(2.54)
                .RightMargin = CentimetersToPoints(2.54)
                .PageWidth = CentimetersToPoints(29.7)
                .PageHeight = CentimetersToPoints(21)
            End If
            .HeaderDistance = CentimetersToPoints(1.5)
            .FooterDistance = CentimetersToPoints(1.75)
        End With
    Next
End Sub
