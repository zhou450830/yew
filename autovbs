Sub 纵横转换() '开始定义一个名为“纵横转换”的子过程实现横向和纵向页面的转换。下面是代码的逐行注释：

    With Selection '将当前选定内容（即光标所在位置）与“With”语句中指定对象关联起来
        If .Type <> wdSelectionIP Then '如果当前选定内容不是插入点，则执行以下操作
            ActiveDocument.Range(Start:=.Start, End:=.Start).InsertBreak Type:=wdSectionBreakNextPage '在当前选定内容的开头插入分节符（下一页）
            .Start = .Start + 1 '将光标移动到新一页的开头
            If .End <> ActiveDocument.Content.End Then '如果当前选定内容的结尾不在文档末尾，则执行以下操作
                ActiveDocument.Range(Start:=.End, End:=.End).InsertBreak Type:=wdSectionBreakNextPage '在当前选定内容的末尾插入分节符（下一页）
            End If
        End If
        With .PageSetup '将当前选定内容所在页的页面设置与“With”语句中指定对象关联起来
            If .Orientation = wdOrientPortrait Then .Orientation = wdOrientLandscape Else .Orientation = wdOrientPortrait '如果页面为纵向，则将其设置为横向；否则，将其设置为纵向
        End With
    End With
End Sub
Sub call宏()
Call 删除无效样式
Call ShowTime
 '定义了一个名为 "call宏" 的 Sub 过程，其中调用了两个以 Call 关键字开始的语句。这两个语句分别调用了名为 "删除无效样式" 和 "删除页眉横线" 的 Sub 过程。这意味着当执行 "call宏" 过程时，将自动执行这两个被调用的过程。

 '需要说明的是，在 VBA 中使用 Call 关键字调用 Sub 过程是可选的。可以直接使用子过程名和指定的参数列表来调用 Sub 过程，无需使用 Call 关键字。但是，在某些情况下，使用 Call 可以提高代码可读性并使其更易于理解。

 '此外，该代码中未定义任何参数，因此 Sub 过程不需要传递任何参数。这意味着，被调用的 Sub 过程应该在其自己的代码中定义所有必需的变量和参数，而不是从父过程传递这些变量和参数。

End Sub
Sub 删除无效样式()
    For Each objStyle In ActiveDocument.Styles
    On Error Resume Next
    If objStyle.BuiltIn = False And objStyle.InUse = True Then
    objStyle.Delete
    End If
    Next
    End Sub
    '函数G：显示代码运行的时间
Sub ShowTime()
StartTime = Timer '记录开始时间
'你的代码
EndTime = Timer '记录结束时间
MsgBox "代码运行时间：" & FormatNumber(EndTime - StartTime, 2) & " 秒"
End Sub
'函数G：显示代码运行的时间
Sub FormadingAsList标题样式格式化为列表()
'将Word文档中的标题样式格式化为列表。

'首先，该程序将ActiveDocument变量设置为doc对象，然后使用For Each语句遍历所有的样式，并将每个样式存储在sty对象中。接下来使用Left函数检查样式名称是否以"Heading"开头。如果是，则使用ParagraphFormat属性调整样式的缩进、前后间距和大纲级别。

'样式的左缩进被设置为0英寸，SpaceBefore属性设置为0点，SpaceAfter属性设置为6点以保持行距的合理间隔。OutlineLevel属性根据样式名称中的数字设置为相应的值。

'最后，该程序使用Set语句清除对象变量以释放内存。
    Dim doc As Document
    Dim sty As Style
    Set doc = ActiveDocument
    
    ' 遍历所有的样式
    For Each sty In doc.Styles
        ' 检查样式名称是否以"Heading"开头
        If Left(sty.NameLocal, 7) = "Heading" Then
            ' 将样式的缩进、前后间距和大纲级别调整为所需的值
            With sty.ParagraphFormat
                .LeftIndent = InchesToPoints(0)
                .SpaceBefore = 0
                .SpaceAfter = 6
                .OutlineLevel = CLng(Right(sty.NameLocal, 1))
            End With
        End If
    Next
    
    ' 手动清除对象变量以释放内存
    Set doc = Nothing
    Set sty = Nothing
End Sub
 '这个宏会遍历文档中的所有样式，如果样式名以“Heading”开头，则将它的段落格式设置为多级列表的级别，从而实现自动排版。
 Sub PaperSetup()
' the code defines a sub called "papersetup". this sub loops through all sections in the active document and sets various properties of their pagesetup object.

' if the section's orientation is portrait, then the top and bottom margins are set to 2.54cm, left and right margins to 3.17cm, and the page size is set to a4 (21x29.7cm). otherwise, if the section's orientation is landscape, then the top and bottom margins are set to 2.5cm, left and right margins to 2.54cm, and the page size is set to reverse-a4 (29.7x21cm).

' in both cases, the header distance is set to 1.5cm and footer distance is set to 1.75cm.用于对Word文档中所有章节的页面设置进行统一配置。

'该代码使用了For Each循环，依次对当前文档中的每一个章节进行处理。处理过程中，该代码首先获取该章节的页面设置(PageSetup)对象，然后根据页面方向(Orientation)的不同分别设置上下边距、左右边距和页面大小，以及页眉与正文之间、页脚与正文之间的距离。因此，在文档存在多种纸张、页面方向的情况下，该代码可以自动识别并完成适当的页面设置，并确保各个章节的页面设置一致。

'值得注意的是，该代码中使用了CentimetersToPoints函数将厘米单位的数值转换为磅单位（即Word中的默认测量单位），以便正确地设置页面大小和距离。在使用该代码时，应先仔细检查所选的纸张、页边距和页眉页脚等设置，确保它们符合实际需要。

' note: "centimeterstopoints" is a built-in function in vba that converts from centimeters to points (i.e. the unit of measurement used by word).
    Dim s As Section
    For Each s In ActiveDocument.Sections
        With s.PageSetup
            If .Orientation = wdOrientPortrait Then
                .TopMargin = CentimetersToPoints(2.54)
                .BottomMargin = CentimetersToPoints(2.54)
                .LeftMargin = CentimetersToPoints(3.17)
                .RightMargin = CentimetersToPoints(3.17)
                .PageWidth = CentimetersToPoints(21)
                .PageHeight = CentimetersToPoints(29.7)
            Else
                .TopMargin = CentimetersToPoints(2.5)
                .BottomMargin = CentimetersToPoints(2.5)
                .LeftMargin = CentimetersToPoints(2.54)
                .RightMargin = CentimetersToPoints(2.54)
                .PageWidth = CentimetersToPoints(29.7)
                .PageHeight = CentimetersToPoints(21)
            End If
            .HeaderDistance = CentimetersToPoints(1.5)
            .FooterDistance = CentimetersToPoints(1.75)
        End With
    Next
End Sub
